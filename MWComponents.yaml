---


name: EyeLink Device
signature: iodevice/eyelink
isa: IODevice
platform: macos
description: |
    Digital interface to an `EyeLink <https://www.sr-research.com>`_
    eye tracker.  Tested with the `EyeLink 1000/1000 Plus
    <https://www.sr-research.com/products/eyelink-1000-plus/>`_
    and `EyeLink II <https://www.sr-research.com/products/eyelink-ii/>`_
    trackers, but may be compatible with additional devices.

    If the tracker is run in binocular mode, `eye_x`_, `eye_y`_, and `eye_z`_
    give the midpoint of the shortest connecting line that is orthogonal to both
    gaze vectors; otherwise, these values will be empty.  All other output
    parameters are specified and described in the EyeLink 1000 User Manual.  If
    an eye tracker packet contains no data for a parameter, EyeLink's
    ``MISSING_DATA`` value (-32768) is written to the corresponding variable.

    .. rubric:: Calibration

    In order to perform a tracker-driven calibration, validation, or drift
    correction, you must arrange for the drawing of a fixation target on MWorks'
    stimulus display at locations and times controlled by the tracker.  This is
    accomplished via the parameters `cal_target_x`_, `cal_target_y`_, and
    `cal_target_visible`_, as demonstrated in the following example::

        // cal_target_x and cal_target_y receive the location of the
        // fixation target
        
        var cal_target_x = 0
        var cal_target_y = 0
        
        circle cal_target (
            color = 1,0,0
            x_size = 1
            x_position = cal_target_x
            y_position = cal_target_y
            )
        
        // cal_target_visible receives the signal to show or hide
        // the fixation target.  Attached actions draw or remove
        // the target as appropriate.
        
        var cal_target_visible (false) {
            choose {
                when (cal_target_visible) {
                    queue_stimulus (cal_target)
                    update_display ()
                }
                otherwise {
                    clear_display ()
                }
            }
        }
        
        // All three variable names must be provided as parameters
        // in the device declaration
        
        iodevice/eyelink eyelink (
            ...
            cal_target_x = cal_target_x
            cal_target_y = cal_target_y
            cal_target_visible = cal_target_visible
            ...
            )

    To initiate a calibration, validation, or drift correction, use the
    `EyeLink Tracker Setup` action::

        eyelink_tracker_setup (
            device = eyelink
            calibration_type = HV13
            )

parameters: 
  - 
    name: tracker_ip
    required: yes
    example: 100.1.1.1
    description: The tracker's IP address
  - 
    name: tracking_dist
    example: 1024
    description: |
        Tracking range in eye tracker units.  (The default value should be
        1024.)

        Required to compute `eye_x`_, `eye_y`_, and `eye_z`_.
  - 
    name: data_interval
    required: yes
    example: 1ms
    description: >
        Data polling interval.  Should not be too short, but faster than
        tracker's sampling rate.
  - 
    name: eye_rx
    description: Variable in which to store right eye screen gaze x
  - 
    name: eye_ry
    description: Variable in which to store right eye screen gaze y
  - 
    name: eye_lx
    description: Variable in which to store left eye screen gaze x
  - 
    name: eye_ly
    description: Variable in which to store left eye screen gaze y
  - 
    name: eye_x
    description: Variable in which to store computed ``eye_x`` (described above)
  - 
    name: eye_y
    description: Variable in which to store computed ``eye_y`` (described above)
  - 
    name: eye_z
    description: Variable in which to store computed ``eye_z`` (described above)
  - 
    name: href_rx
    description: Variable in which to store right eye headref x
  - 
    name: href_ry
    description: Variable in which to store right eye headref y
  - 
    name: href_lx
    description: Variable in which to store left eye headref x
  - 
    name: href_ly
    description: Variable in which to store left eye headref y
  - 
    name: pupil_rx
    description: Variable in which to store right eye pupil x
  - 
    name: pupil_ry
    description: Variable in which to store right eye pupil y
  - 
    name: pupil_lx
    description: Variable in which to store left eye pupil x
  - 
    name: pupil_ly
    description: Variable in which to store left eye pupil y
  - 
    name: pupil_size_r
    description: Variable in which to store right pupil size or area
  - 
    name: pupil_size_l
    description: Variable in which to store left pupil size or area
  - 
    name: blink_r
    description: >
        Variable in which to store right eye blink state (true when blinking,
        false otherwise)
  - 
    name: blink_l
    description: >
        Variable in which to store left eye blink state (true when blinking,
        false otherwise)
  - 
    name: saccade_r
    description: >
        Variable in which to store right eye saccade state (true when in
        saccade, false otherwise)
  - 
    name: saccade_l
    description: >
        Variable in which to store left eye saccade state (true when in
        saccade, false otherwise)
  - 
    name: fixation_r
    description: >
        Variable in which to store right eye fixation state (true when fixating,
        false otherwise)
  - 
    name: fixation_l
    description: >
        Variable in which to store left eye fixation state (true when fixating,
        false otherwise)
  - 
    name: cal_target_x
    description: Variable in which to store calibration target x coordinate
  - 
    name: cal_target_y
    description: Variable in which to store calibration target y coordinate
  - 
    name: cal_target_visible
    description: >
        Variable in which to store calibration target visibility state (true
        when the target should be visible, false when it should be hidden)
  - 
    name: eye_time
    description: Variable in which to store time of sample (on EyeLink clock)
  - 
    name: display
    description: >
        Name of the display on which to perform tracker-driven calibration. If
        omitted, the default display (if available) will be used.


---


name: EyeLink Tracker Setup
signature: action/eyelink_tracker_setup
isa: Action
platform: macos
description: |
    Prepare for calibration and launch the setup screen of an `EyeLink Device`.

    Before launching the setup screen, this action sets the tracker's
    gaze-position coordinate system (via EyeLink's ``screen_pixel_coords``
    command) to match the coordinate system used on MWorks' main stimulus
    display.  It then sets the calibration type (as specified in
    `calibration_type`_), so that the tracker recomputes the positions of
    fixation targets in the new coordinate system.

    Once the EyeLink setup screen has been launched, the user can manually
    initiate calibration, validation, or drift correction via the EyeLink host
    PC.

    This action can be executed only when the EyeLink device is *stopped* (i.e.
    before the experiment invokes `Start IO Device` on it, or after it invokes
    `Stop IO Device`).  Execution continues until the user manually exits the
    setup screen on the EyeLink host PC.
parameters: 
  - 
    name: device
    required: yes
    description: Name of EyeLink device
  - 
    name: calibration_type
    options: [H3, HV3, HV5, HV9, HV13]
    default: HV9
    description: Desired calibration type


